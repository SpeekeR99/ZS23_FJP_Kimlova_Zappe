program::=
    decl_var_stmt program
    | decl_func_stmt program
    | /* empty */

decl_var_stmt::=
    TYPE ID SEMICOLON
    | CONSTANT TYPE ID SEMICOLON
    | TYPE assign_stmt
    | CONSTANT TYPE assign_stmt

assign_stmt::=
    ID ASSIGN_OP expr SEMICOLON

decl_func_stmt::=
    TYPE ID L_BRACKET params R_BRACKET block
    | TYPE ID L_BRACKET params R_BRACKET SEMICOLON

params::=
    params_list
    | /* empty */

params_list::=
    TYPE ID COMMA params_list
    | TYPE ID

block::=
    BEGIN_BLOCK stmts END_BLOCK

stmts::=
    stmt stmts
    | /* empty */

stmt::=
    decl_var_stmt
    | assign_stmt
    | if_stmt
    | while_stmt
    | for_stmt
    | call_func_stmt
    | return_stmt

if_stmt::=
    IF L_BRACKET expr R_BRACKET block else_stmt

else_stmt::=
    ELSE block
    | /* empty */

while_stmt::=
    WHILE L_BRACKET expr R_BRACKET block

for_stmt::=
    FOR L_BRACKET expr SEMICOLON expr SEMICOLON expr R_BRACKET block

call_func_stmt::=
    call_func_expr SEMICOLON

return_stmt::=
    RETURN expr SEMICOLON

expr::=
    ID
    | LITERAL
    | L_BRACKET expr R_BRACKET
    | arithm_expr
    | logic_expr
    | compare_expr
    | cast_expr
    | call_func_expr

arithm_expr::=
    expr SUM expr
    | expr SUB expr
    | expr MUL expr
    | expr DIV expr
    | expr MOD expr
    | U_MINUS expr /* unary minus */

logic_expr::=
    expr AND expr
    | expr OR expr
    | NOT expr

compare_expr::=
    expr EQ expr
    | expr NEQ expr
    | expr LESS expr
    | expr LESSEQ expr
    | expr GRT expr
    | expr GRTEQ expr

cast_expr::=
    L_BRACKET TYPE R_BRACKET expr

call_func_expr::=
    ID L_BRACKET args R_BRACKET

args::=
    args_list
    | /* empty */

args_list::=
    expr COMMA args_list
    | expr
